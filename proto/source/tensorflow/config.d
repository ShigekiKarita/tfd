// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/config.proto

module tensorflow.config;

import google.protobuf;
import tensorflow.cost_graph;
import tensorflow.graph;
import tensorflow.step_stats;
import tensorflow.cluster;
import tensorflow.debug_;
import tensorflow.rewriter_config;

enum protocVersion = 3012004;

class GPUOptions
{
    @Proto(1) double perProcessGpuMemoryFraction = protoDefaultValue!(double);
    @Proto(2) string allocatorType = protoDefaultValue!(string);
    @Proto(3) long deferredDeletionBytes = protoDefaultValue!(long);
    @Proto(4) bool allowGrowth = protoDefaultValue!(bool);
    @Proto(5) string visibleDeviceList = protoDefaultValue!(string);
    @Proto(6) int pollingActiveDelayUsecs = protoDefaultValue!(int);
    @Proto(7) int pollingInactiveDelayMsecs = protoDefaultValue!(int);
    @Proto(8) bool forceGpuCompatible = protoDefaultValue!(bool);
    @Proto(9) GPUOptions.Experimental experimental = protoDefaultValue!(GPUOptions.Experimental);

    static class Experimental
    {
        @Proto(1) GPUOptions.Experimental.VirtualDevices[] virtualDevices = protoDefaultValue!(GPUOptions.Experimental.VirtualDevices[]);
        @Proto(2) bool useUnifiedMemory = protoDefaultValue!(bool);
        @Proto(3) int numDevToDevCopyStreams = protoDefaultValue!(int);
        @Proto(4) string collectiveRingOrder = protoDefaultValue!(string);
        @Proto(5) bool timestampedAllocator = protoDefaultValue!(bool);
        @Proto(7) int kernelTrackerMaxInterval = protoDefaultValue!(int);
        @Proto(8) int kernelTrackerMaxBytes = protoDefaultValue!(int);
        @Proto(9) int kernelTrackerMaxPending = protoDefaultValue!(int);

        static class VirtualDevices
        {
            @Proto(1, Wire.none, Yes.packed) float[] memoryLimitMb = protoDefaultValue!(float[]);
        }
    }
}

class OptimizerOptions
{
    @Proto(1) bool doCommonSubexpressionElimination = protoDefaultValue!(bool);
    @Proto(2) bool doConstantFolding = protoDefaultValue!(bool);
    @Proto(3) Level optLevel = protoDefaultValue!(Level);
    @Proto(4) bool doFunctionInlining = protoDefaultValue!(bool);
    @Proto(5) GlobalJitLevel globalJitLevel = protoDefaultValue!(GlobalJitLevel);
    @Proto(6) long maxFoldedConstantInBytes = protoDefaultValue!(long);

    enum Level
    {
        L1 = 0,
        L0 = -1,
    }

    enum GlobalJitLevel
    {
        DEFAULT = 0,
        OFF = -1,
        ON_1 = 1,
        ON_2 = 2,
    }
}

class GraphOptions
{
    @Proto(2) bool enableRecvScheduling = protoDefaultValue!(bool);
    @Proto(3) OptimizerOptions optimizerOptions = protoDefaultValue!(OptimizerOptions);
    @Proto(4) long buildCostModel = protoDefaultValue!(long);
    @Proto(5) bool inferShapes = protoDefaultValue!(bool);
    @Proto(6) bool placePrunedGraph = protoDefaultValue!(bool);
    @Proto(7) bool enableBfloat16Sendrecv = protoDefaultValue!(bool);
    @Proto(8) int timelineStep = protoDefaultValue!(int);
    @Proto(9) long buildCostModelAfter = protoDefaultValue!(long);
    @Proto(10) RewriterConfig rewriteOptions = protoDefaultValue!(RewriterConfig);
}

class ThreadPoolOptionProto
{
    @Proto(1) int numThreads = protoDefaultValue!(int);
    @Proto(2) string globalName = protoDefaultValue!(string);
}

class RPCOptions
{
    @Proto(1) bool useRpcForInprocessMaster = protoDefaultValue!(bool);
    @Proto(2) string compressionAlgorithm = protoDefaultValue!(string);
    @Proto(3) int compressionLevel = protoDefaultValue!(int);
    @Proto(4) bool cacheRpcResponse = protoDefaultValue!(bool);
    @Proto(5) bool disableSessionConnectionSharing = protoDefaultValue!(bool);
}

class SessionMetadata
{
    @Proto(1) string name = protoDefaultValue!(string);
    @Proto(2) long version_ = protoDefaultValue!(long);
}

class ConfigProto
{
    @Proto(1) int[string] deviceCount = protoDefaultValue!(int[string]);
    @Proto(2) int intraOpParallelismThreads = protoDefaultValue!(int);
    @Proto(3) int placementPeriod = protoDefaultValue!(int);
    @Proto(4) string[] deviceFilters = protoDefaultValue!(string[]);
    @Proto(5) int interOpParallelismThreads = protoDefaultValue!(int);
    @Proto(6) GPUOptions gpuOptions = protoDefaultValue!(GPUOptions);
    @Proto(7) bool allowSoftPlacement = protoDefaultValue!(bool);
    @Proto(8) bool logDevicePlacement = protoDefaultValue!(bool);
    @Proto(9) bool usePerSessionThreads = protoDefaultValue!(bool);
    @Proto(10) GraphOptions graphOptions = protoDefaultValue!(GraphOptions);
    @Proto(11) long operationTimeoutInMs = protoDefaultValue!(long);
    @Proto(12) ThreadPoolOptionProto[] sessionInterOpThreadPool = protoDefaultValue!(ThreadPoolOptionProto[]);
    @Proto(13) RPCOptions rpcOptions = protoDefaultValue!(RPCOptions);
    @Proto(14) ClusterDef clusterDef = protoDefaultValue!(ClusterDef);
    @Proto(15) bool isolateSessionState = protoDefaultValue!(bool);
    @Proto(16) ConfigProto.Experimental experimental = protoDefaultValue!(ConfigProto.Experimental);

    static class Experimental
    {
        @Proto(1) string collectiveGroupLeader = protoDefaultValue!(string);
        @Proto(3) string executorType = protoDefaultValue!(string);
        @Proto(4) int recvBufMaxChunk = protoDefaultValue!(int);
        @Proto(5) bool useNumaAffinity = protoDefaultValue!(bool);
        @Proto(6) bool collectiveDeterministicSequentialExecution = protoDefaultValue!(bool);
        @Proto(7) bool collectiveNccl = protoDefaultValue!(bool);
        @Proto(8) bool shareSessionStateInClusterspecPropagation = protoDefaultValue!(bool);
        @Proto(9) bool disableThreadSpinning = protoDefaultValue!(bool);
        @Proto(10) bool shareClusterDevicesInSession = protoDefaultValue!(bool);
        @Proto(11) SessionMetadata sessionMetadata = protoDefaultValue!(SessionMetadata);
        @Proto(12) bool optimizeForStaticGraph = protoDefaultValue!(bool);
        @Proto(13) bool enableMlirBridge = protoDefaultValue!(bool);
        @Proto(14) bool disableOutputPartitionGraphs = protoDefaultValue!(bool);
        @Proto(15) long xlaFusionAutotunerThresh = protoDefaultValue!(long);
    }
}

class RunOptions
{
    @Proto(1) TraceLevel traceLevel = protoDefaultValue!(TraceLevel);
    @Proto(2) long timeoutInMs = protoDefaultValue!(long);
    @Proto(3) int interOpThreadPool = protoDefaultValue!(int);
    @Proto(5) bool outputPartitionGraphs = protoDefaultValue!(bool);
    @Proto(6) DebugOptions debugOptions = protoDefaultValue!(DebugOptions);
    @Proto(7) bool reportTensorAllocationsUponOom = protoDefaultValue!(bool);
    @Proto(8) RunOptions.Experimental experimental = protoDefaultValue!(RunOptions.Experimental);

    static class Experimental
    {
        @Proto(1) long collectiveGraphKey = protoDefaultValue!(long);
        @Proto(2) bool useRunHandlerPool = protoDefaultValue!(bool);
    }

    enum TraceLevel
    {
        NO_TRACE = 0,
        SOFTWARE_TRACE = 1,
        HARDWARE_TRACE = 2,
        FULL_TRACE = 3,
    }
}

class RunMetadata
{
    @Proto(1) StepStats stepStats = protoDefaultValue!(StepStats);
    @Proto(2) CostGraphDef costGraph = protoDefaultValue!(CostGraphDef);
    @Proto(3) GraphDef[] partitionGraphs = protoDefaultValue!(GraphDef[]);
    @Proto(4) RunMetadata.FunctionGraphs[] functionGraphs = protoDefaultValue!(RunMetadata.FunctionGraphs[]);

    static class FunctionGraphs
    {
        @Proto(1) GraphDef[] partitionGraphs = protoDefaultValue!(GraphDef[]);
        @Proto(2) GraphDef preOptimizationGraph = protoDefaultValue!(GraphDef);
        @Proto(3) GraphDef postOptimizationGraph = protoDefaultValue!(GraphDef);
    }
}

class TensorConnection
{
    @Proto(1) string fromTensor = protoDefaultValue!(string);
    @Proto(2) string toTensor = protoDefaultValue!(string);
}

class CallableOptions
{
    @Proto(1) string[] feed = protoDefaultValue!(string[]);
    @Proto(2) string[] fetch = protoDefaultValue!(string[]);
    @Proto(3) string[] target = protoDefaultValue!(string[]);
    @Proto(4) RunOptions runOptions = protoDefaultValue!(RunOptions);
    @Proto(5) TensorConnection[] tensorConnection = protoDefaultValue!(TensorConnection[]);
    @Proto(6) string[string] feedDevices = protoDefaultValue!(string[string]);
    @Proto(7) string[string] fetchDevices = protoDefaultValue!(string[string]);
    @Proto(8) bool fetchSkipSync = protoDefaultValue!(bool);
}
