// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/eager_service.proto

module tensorflow.eager.eager_service;

import google.protobuf;
import tensorflow.attr_value;
import tensorflow.device_attributes;
import tensorflow.function_;
import tensorflow.tensor;
import tensorflow.tensor_shape;
import tensorflow.versions;
import tensorflow.eager.remote_tensor_handle;
import tensorflow.tensorflow_server;

enum protocVersion = 3012004;

class Operation
{
    @Proto(1) long id = protoDefaultValue!(long);
    @Proto(2) string name = protoDefaultValue!(string);
    @Proto(3) RemoteTensorHandle[] inputs = protoDefaultValue!(RemoteTensorHandle[]);
    @Proto(4, Wire.none, Yes.packed) long[] controlOpIds = protoDefaultValue!(long[]);
    @Proto(5) AttrValue[string] attrs = protoDefaultValue!(AttrValue[string]);
    @Proto(6) string device = protoDefaultValue!(string);
    @Proto(7) bool isComponentFunction = protoDefaultValue!(bool);
    @Proto(8) long funcStepId = protoDefaultValue!(long);
    @Proto(9) bool isFunction = protoDefaultValue!(bool);
}

class QueueItem
{
    enum ItemCase
    {
        itemNotSet = 0,
        handleToDecref = 1,
        operation = 2,
        sendTensor = 3,
        registerFunction = 4,
        cleanupFunction = 5,
    }
    ItemCase _itemCase = ItemCase.itemNotSet;
    @property ItemCase itemCase() { return _itemCase; }
    void clearItem() { _itemCase = ItemCase.itemNotSet; }
    @Oneof("_itemCase") union
    {
        @Proto(1) RemoteTensorHandle _handleToDecref = protoDefaultValue!(RemoteTensorHandle); mixin(oneofAccessors!_handleToDecref);
        @Proto(2) Operation _operation; mixin(oneofAccessors!_operation);
        @Proto(3) SendTensorOp _sendTensor; mixin(oneofAccessors!_sendTensor);
        @Proto(4) RegisterFunctionOp _registerFunction; mixin(oneofAccessors!_registerFunction);
        @Proto(5) CleanupFunctionOp _cleanupFunction; mixin(oneofAccessors!_cleanupFunction);
    }
}

class QueueResponse
{
    @Proto(1) TensorShapeProto[] shape = protoDefaultValue!(TensorShapeProto[]);
}

class CreateContextRequest
{
    @Proto(1) ServerDef serverDef = protoDefaultValue!(ServerDef);
    @Proto(2) bool async = protoDefaultValue!(bool);
    @Proto(3) long keepAliveSecs = protoDefaultValue!(long);
    @Proto(4) VersionDef versionDef = protoDefaultValue!(VersionDef);
    @Proto(6) DeviceAttributes[] clusterDeviceAttributes = protoDefaultValue!(DeviceAttributes[]);
    @Proto(7, Wire.fixed) ulong contextId = protoDefaultValue!(ulong);
    @Proto(8, Wire.fixed) ulong contextViewId = protoDefaultValue!(ulong);
    @Proto(9) bool lazyCopyRemoteFunctionInputs = protoDefaultValue!(bool);
}

class CreateContextResponse
{
    @Proto(2) DeviceAttributes[] deviceAttributes = protoDefaultValue!(DeviceAttributes[]);
}

class UpdateContextRequest
{
    @Proto(1) ServerDef serverDef = protoDefaultValue!(ServerDef);
    @Proto(2) DeviceAttributes[] clusterDeviceAttributes = protoDefaultValue!(DeviceAttributes[]);
    @Proto(3, Wire.fixed) ulong contextId = protoDefaultValue!(ulong);
    @Proto(4, Wire.fixed) ulong contextViewId = protoDefaultValue!(ulong);
}

class UpdateContextResponse
{
    @Proto(1) DeviceAttributes[] deviceAttributes = protoDefaultValue!(DeviceAttributes[]);
}

class EnqueueRequest
{
    @Proto(1, Wire.fixed) ulong contextId = protoDefaultValue!(ulong);
    @Proto(3) QueueItem[] queue = protoDefaultValue!(QueueItem[]);
}

class EnqueueResponse
{
    @Proto(1) QueueResponse[] queueResponse = protoDefaultValue!(QueueResponse[]);
}

class WaitQueueDoneRequest
{
    @Proto(1, Wire.fixed) ulong contextId = protoDefaultValue!(ulong);
    @Proto(2, Wire.none, Yes.packed) long[] opId = protoDefaultValue!(long[]);
}

class WaitQueueDoneResponse
{
}

class KeepAliveRequest
{
    @Proto(1, Wire.fixed) ulong contextId = protoDefaultValue!(ulong);
}

class KeepAliveResponse
{
    @Proto(1, Wire.fixed) ulong contextViewId = protoDefaultValue!(ulong);
}

class CloseContextRequest
{
    @Proto(1, Wire.fixed) ulong contextId = protoDefaultValue!(ulong);
    @Proto(2, Wire.fixed) ulong contextViewId = protoDefaultValue!(ulong);
}

class CloseContextResponse
{
}

class RegisterFunctionOp
{
    @Proto(1) FunctionDef functionDef = protoDefaultValue!(FunctionDef);
    @Proto(2) bool isComponentFunction = protoDefaultValue!(bool);
    @Proto(3) FunctionDefLibrary library = protoDefaultValue!(FunctionDefLibrary);
}

class CleanupFunctionOp
{
    @Proto(1) long stepId = protoDefaultValue!(long);
}

class SendTensorOp
{
    @Proto(1) long opId = protoDefaultValue!(long);
    @Proto(2) TensorProto[] tensors = protoDefaultValue!(TensorProto[]);
    @Proto(3) string deviceName = protoDefaultValue!(string);
}
