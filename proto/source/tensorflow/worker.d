// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/worker.proto

module tensorflow.worker;

import google.protobuf;
import google.protobuf.any;
import tensorflow.cost_graph;
import tensorflow.device_attributes;
import tensorflow.graph;
import tensorflow.step_stats;
import tensorflow.tensor;
import tensorflow.tensor_shape;
import tensorflow.types;
import tensorflow.config;
import tensorflow.debug_;
import tensorflow.error.error_codes;
import tensorflow.named_tensor;
import tensorflow.tensorflow_server;

enum protocVersion = 3012004;

class GetStatusRequest
{
}

class GetStatusResponse
{
    @Proto(1) DeviceAttributes[] deviceAttributes = protoDefaultValue!(DeviceAttributes[]);
}

class CreateWorkerSessionRequest
{
    @Proto(1) string sessionHandle = protoDefaultValue!(string);
    @Proto(2) ServerDef serverDef = protoDefaultValue!(ServerDef);
    @Proto(3) bool isolateSessionState = protoDefaultValue!(bool);
    @Proto(4) DeviceAttributes[] clusterDeviceAttributes = protoDefaultValue!(DeviceAttributes[]);
}

class CreateWorkerSessionResponse
{
}

class DeleteWorkerSessionRequest
{
    @Proto(1) string sessionHandle = protoDefaultValue!(string);
}

class DeleteWorkerSessionResponse
{
}

class RegisterGraphRequest
{
    @Proto(1) string sessionHandle = protoDefaultValue!(string);
    @Proto(2) GraphDef graphDef = protoDefaultValue!(GraphDef);
    @Proto(3) bool hasControlFlow = protoDefaultValue!(bool);
    @Proto(4) GraphOptions graphOptions = protoDefaultValue!(GraphOptions);
    @Proto(5) DebugOptions debugOptions = protoDefaultValue!(DebugOptions);
    @Proto(6) bool createWorkerSessionCalled = protoDefaultValue!(bool);
    @Proto(7) long collectiveGraphKey = protoDefaultValue!(long);
    @Proto(8) ConfigProto configProto = protoDefaultValue!(ConfigProto);
}

class RegisterGraphResponse
{
    @Proto(1) string graphHandle = protoDefaultValue!(string);
}

class DeregisterGraphRequest
{
    @Proto(1) string graphHandle = protoDefaultValue!(string);
    @Proto(2) string sessionHandle = protoDefaultValue!(string);
    @Proto(3) bool createWorkerSessionCalled = protoDefaultValue!(bool);
}

class DeregisterGraphResponse
{
}

class CleanupAllRequest
{
    @Proto(1) string[] container = protoDefaultValue!(string[]);
}

class CleanupAllResponse
{
}

class ExecutorOpts
{
    @Proto(1) bool recordCosts = protoDefaultValue!(bool);
    @Proto(3) bool recordTimeline = protoDefaultValue!(bool);
    @Proto(4) bool recordPartitionGraphs = protoDefaultValue!(bool);
    @Proto(5) bool reportTensorAllocationsUponOom = protoDefaultValue!(bool);
}

class RunGraphRequest
{
    @Proto(1) string graphHandle = protoDefaultValue!(string);
    @Proto(2) long stepId = protoDefaultValue!(long);
    @Proto(3) NamedTensorProto[] send = protoDefaultValue!(NamedTensorProto[]);
    @Proto(4) string[] recvKey = protoDefaultValue!(string[]);
    @Proto(5) ExecutorOpts execOpts = protoDefaultValue!(ExecutorOpts);
    @Proto(6) bool isPartial = protoDefaultValue!(bool);
    @Proto(7) bool isLastPartialRun = protoDefaultValue!(bool);
    @Proto(8) string sessionHandle = protoDefaultValue!(string);
    @Proto(9) bool storeErrorsInResponseBody = protoDefaultValue!(bool);
    @Proto(10) bool createWorkerSessionCalled = protoDefaultValue!(bool);
    @Proto(11) long requestId = protoDefaultValue!(long);
}

class RunGraphResponse
{
    @Proto(1) NamedTensorProto[] recv = protoDefaultValue!(NamedTensorProto[]);
    @Proto(2) StepStats stepStats = protoDefaultValue!(StepStats);
    @Proto(3) CostGraphDef costGraph = protoDefaultValue!(CostGraphDef);
    @Proto(4) GraphDef[] partitionGraph = protoDefaultValue!(GraphDef[]);
    @Proto(5) Code statusCode = protoDefaultValue!(Code);
    @Proto(6) string statusErrorMessage = protoDefaultValue!(string);
}

class CleanupGraphRequest
{
    @Proto(1) long stepId = protoDefaultValue!(long);
}

class CleanupGraphResponse
{
}

class RecvTensorRequest
{
    @Proto(1) long stepId = protoDefaultValue!(long);
    @Proto(2) string rendezvousKey = protoDefaultValue!(string);
    @Proto(3) bool dmaOk = protoDefaultValue!(bool);
    @Proto(4) DeviceLocality clientLocality = protoDefaultValue!(DeviceLocality);
    @Proto(5) DeviceLocality serverLocality = protoDefaultValue!(DeviceLocality);
    @Proto(6) Any transportOptions = protoDefaultValue!(Any);
    @Proto(7) long requestId = protoDefaultValue!(long);
}

class RecvTensorResponse
{
    @Proto(1) TensorProto tensor = protoDefaultValue!(TensorProto);
    @Proto(2) bool isDead = protoDefaultValue!(bool);
    @Proto(3) long sendStartMicros = protoDefaultValue!(long);
    @Proto(4) Any transportOptions = protoDefaultValue!(Any);
    @Proto(5) bool requireAck = protoDefaultValue!(bool);
}

class MarkRecvFinishedRequest
{
    @Proto(1) long requestId = protoDefaultValue!(long);
}

class MarkRecvFinishedResponse
{
}

class LoggingRequest
{
    @Proto(1) bool enableRpcLogging = protoDefaultValue!(bool);
    @Proto(2) bool clear = protoDefaultValue!(bool);
    @Proto(3, Wire.none, Yes.packed) long[] fetchStepId = protoDefaultValue!(long[]);
    @Proto(4) bool disableRpcLogging = protoDefaultValue!(bool);
}

class LabeledStepStats
{
    @Proto(1) long stepId = protoDefaultValue!(long);
    @Proto(2) StepStats stepStats = protoDefaultValue!(StepStats);
}

class LoggingResponse
{
    @Proto(1) LabeledStepStats[] step = protoDefaultValue!(LabeledStepStats[]);
}

class TraceOpts
{
    @Proto(1) double duration = protoDefaultValue!(double);
    @Proto(2) bool useStepProfiler = protoDefaultValue!(bool);
    @Proto(3) bool useKernelProfiler = protoDefaultValue!(bool);
    @Proto(4) bool useExtendedProfiler = protoDefaultValue!(bool);
    @Proto(5) bool useGpuProfiler = protoDefaultValue!(bool);
    @Proto(6) bool useSampleProfiler = protoDefaultValue!(bool);
}

class TracingRequest
{
    @Proto(1) TraceOpts options = protoDefaultValue!(TraceOpts);
}

class TracingResponse
{
}

class RecvBufRequest
{
    @Proto(1) long stepId = protoDefaultValue!(long);
    @Proto(2) string bufRendezvousKey = protoDefaultValue!(string);
    @Proto(3) long numBytes = protoDefaultValue!(long);
    @Proto(4, Wire.fixed) ulong bufPtr = protoDefaultValue!(ulong);
    @Proto(5) DeviceLocality clientLocality = protoDefaultValue!(DeviceLocality);
    @Proto(6) DeviceLocality serverLocality = protoDefaultValue!(DeviceLocality);
    @Proto(7) Any transportOptions = protoDefaultValue!(Any);
    @Proto(8) string srcDevice = protoDefaultValue!(string);
    @Proto(9) string dstDevice = protoDefaultValue!(string);
    @Proto(10) long requestId = protoDefaultValue!(long);
    @Proto(11) ulong srcIncarnation = protoDefaultValue!(ulong);
}

class RecvBufResponse
{
    @Proto(1, Wire.fixed) ulong bufPtr = protoDefaultValue!(ulong);
    @Proto(2) long numBytes = protoDefaultValue!(long);
    @Proto(3) bool isDead = protoDefaultValue!(bool);
    @Proto(4) Any transportOptions = protoDefaultValue!(Any);
    @Proto(5) long sendStartMicros = protoDefaultValue!(long);
    @Proto(6) bool requireAck = protoDefaultValue!(bool);
}

class CompleteGroupRequest
{
    @Proto(1) int groupKey = protoDefaultValue!(int);
    @Proto(2) int groupSize = protoDefaultValue!(int);
    @Proto(3) string deviceType = protoDefaultValue!(string);
    @Proto(4) string[] deviceName = protoDefaultValue!(string[]);
    @Proto(5) int collectiveType = protoDefaultValue!(int);
}

class CompleteGroupResponse
{
    @Proto(1) int groupKey = protoDefaultValue!(int);
    @Proto(2) int groupSize = protoDefaultValue!(int);
    @Proto(3) string deviceType = protoDefaultValue!(string);
    @Proto(4) int numTasks = protoDefaultValue!(int);
    @Proto(5) string[] deviceName = protoDefaultValue!(string[]);
    @Proto(6) string[] taskName = protoDefaultValue!(string[]);
    @Proto(7) bytes communicatorKey = protoDefaultValue!(bytes);
}

class CompleteInstanceRequest
{
    @Proto(1) string name = protoDefaultValue!(string);
    @Proto(2) int type = protoDefaultValue!(int);
    @Proto(3) DataType dataType = protoDefaultValue!(DataType);
    @Proto(4) TensorShapeProto shape = protoDefaultValue!(TensorShapeProto);
    @Proto(5) int groupKey = protoDefaultValue!(int);
    @Proto(6) int groupSize = protoDefaultValue!(int);
    @Proto(7) int instanceKey = protoDefaultValue!(int);
    @Proto(8) string deviceType = protoDefaultValue!(string);
    @Proto(9, Wire.none, Yes.packed) int[] subdivOffset = protoDefaultValue!(int[]);
    @Proto(10) string device = protoDefaultValue!(string);
    @Proto(11) bool isSource = protoDefaultValue!(bool);
}

class CompleteInstanceResponse
{
    @Proto(1) int instanceKey = protoDefaultValue!(int);
    @Proto(2) int sourceRank = protoDefaultValue!(int);
}

class GetStepSequenceRequest
{
    @Proto(1, Wire.none, Yes.packed) long[] graphKey = protoDefaultValue!(long[]);
}

class StepSequence
{
    @Proto(1) long graphKey = protoDefaultValue!(long);
    @Proto(2) long nextStepId = protoDefaultValue!(long);
}

class GetStepSequenceResponse
{
    @Proto(1) StepSequence[] stepSequence = protoDefaultValue!(StepSequence[]);
}
